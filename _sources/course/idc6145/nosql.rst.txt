***************
NoSQL Databases
***************

Introduction to NoSQL databases
===============================
+ Overview of the NoSQL database [#]_, [#]_, [#]_, [#]_, [#]_

  NoSQL (not only SQL) databases, or non-relational databases, have been
  gaining popularity in recent years due to their flexibility, scalability, and
  ability to handle big data. Unlike traditional relational databases, NoSQL
  databases are not based on the relational model and do not use SQL as their
  primary query language. They store data in a variety of ways, such as
  key-value pairs, document-based models, graph databases, and column-family
  stores, and so on.

+ Characteristics of NoSQL databases

  These characteristics are not for every NoSQL databases. They are just
  commonly seen for most NoSQL databases.

  * Non-Relational: NoSQL databases do not use the traditional relational model
    for storing data. Instead, they use alternative data models such as
    document, key-value, column-family, or graph-based models.
  * Horizontal Scalability: NoSQL databases are designed to scale horizontally
    by adding more commodity servers to the system. This makes it easy to
    handle large amounts of data and high levels of traffic.
  * High Availability: NoSQL databases are designed to be highly available by
    replicating data across multiple nodes in the system. This ensures that the
    system can continue to operate even if some nodes fail.
  * Distributed Architecture: NoSQL databases are designed to run on
    distributed architectures, which allows them to handle large amounts of
    data and high levels of traffic. Data is typically partitioned across
    multiple nodes in the system to enable parallel processing.
  * Flexible Schema: NoSQL databases have a flexible schema that allows for
    schemaless data modeling. This means that data can be added or removed from
    the database without the need for a predefined schema.
  * Performance: NoSQL databases are optimized for high performance and low
    latency. They achieve this by using memory-based data structures, caching,
    and distributed processing.

+ Advantages over traditional relational databases

  Comparing NoSQL databases with relational databases, NoSQL databases offer
  several advantages, including the ability to handle unstructured data,
  horizontal scalability, and high availability. They are designed to handle
  large volumes of data, which can be stored across multiple nodes in a
  distributed environment. In contrast, traditional relational databases are
  optimized for structured data, and they are not as flexible when it comes to
  handling unstructured or semi-structured data.

+ Drawbacks compared to relational databases

  There are also some drawbacks to using NoSQL databases, such as a lack of
  support for complex transactions, difficulty in integrating with legacy
  systems, and limited query capabilities. The data integrity model for NoSQL
  databases are usually not as strong as that for relational databases. [#]_
  Therefore, it is essential to evaluate the pros and cons of NoSQL databases
  before deciding whether to use them.

.. list-table:: SQL vs NoSQL
  :header-rows: 1

  * - Features
    - SQL
    - NoSQL
  * - Model
    - Relational
    - Non-relational
  * - Schema
    - Rigid
    - Flexible
  * - Query language
    - SQL
    - DSL
  * - Scalability
    - Vertical
    - Horizontal
  * - Transactions
    - ACID
    - BASE to ACID
  * - Integrity
    - Strong
    - Eventual to strong

+ Future of NoSQL databases

  The future of NoSQL databases looks promising, as they are well-suited for
  handling big data, which is becoming increasingly important in many
  industries. With the growth of cloud computing and the adoption of
  distributed computing, NoSQL databases are expected to become even more
  popular in the coming years.

Types of NoSQL databases
========================
NoSQL databases can be classified into different categories based on their data
models, architecture, and storage systems. One of the most common
classifications of NoSQL databases is based on their data models. In this
classification, there are four main types of NoSQL databases: document-based,
key-value, column-family, and graph databases. Each type of NoSQL database has
its own unique features, advantages, and limitations, making it important to
choose the right type of database for a particular use case.

+ Document-based databases (MongoDB, Couchbase)

  Document-based databases store data in a document-oriented model, where each
  document represents a record in the database. This model allows for flexible
  and dynamic schema design, making it suitable for storing and retrieving
  complex and unstructured data. Examples of document-based databases include
  MongoDB, and Couchbase.

+ Key-value databases (Redis, Amazon DynamoDB)

  Key-value databases store data in a simple key-value format, where each
  record is identified by a unique key. This model is suitable for storing and
  retrieving simple data types and is known for its high scalability and
  performance. Redis and Amazon DynamoDB are two popular examples of a
  key-value database.

+ Column-family databases (Apache Cassandra, Apache HBase, Google BigTable)

  Column-family databases store data in a column-oriented format, where data is
  organized in column families or column groups. This model is suitable for
  storing and retrieving large amounts of structured and semi-structured data,
  and is known for its high scalability and fault-tolerance. Examples of
  column-family databases include Apache Cassandra and HBase.

+ Graph databases (Neo4j, OrientDB)

  Graph databases store data in a graph or network structure, where data
  entities are represented as nodes or vertices, and their relationships are
  represented as edges or links. This model is suitable for storing and
  querying complex data relationships, making it popular for applications such
  as social networks, recommendation systems, and fraud detection. Examples of
  graph databases include Neo4j and OrientDB.

Use cases of NoSQL databases
============================
+ Overview of NoSQL databases use cases [#]_

  NoSQL databases are becoming increasingly popular due to their scalability,
  flexibility, and performance advantages over traditional relational
  databases. These databases are used for a variety of purposes, and each type
  of NoSQL database has its own specific use cases.

+ Use cases for document-based NoSQL databases

  Document-based NoSQL databases are commonly used for storing and managing
  unstructured or semi-structured data such as JSON or XML documents. They are
  particularly useful for web applications that require dynamic and scalable
  data models. Examples of use cases for document-based NoSQL databases include
  content management, e-commerce, and social media platforms. Popular
  document-based NoSQL databases include MongoDB, and Couchbase.

+ Use cases for key-value NoSQL databases

  Key-value NoSQL databases are ideal for managing large volumes of
  unstructured or semi-structured data, such as sensor data or log files. They
  are designed to handle large amounts of data and provide fast read and write
  access. Examples of use cases for key-value NoSQL databases include caching,
  session management, and real-time analytics. Popular key-value NoSQL
  databases include Redis and Amazon DynamoDB.

+ Use cases for column-family NoSQL databases

  Column-family NoSQL databases are designed for handling large volumes of
  structured data. They are commonly used in large-scale distributed systems
  where data needs to be partitioned across multiple nodes. Examples of use
  cases for column-family NoSQL databases include analytics, content
  management, and real-time bidding systems. Popular column-family NoSQL
  databases include Apache Cassandra and HBase.

+ Use cases for graph NoSQL database

  Graph NoSQL databases are designed to manage complex relationships between
  data points, making them particularly useful for social networking, fraud
  detection, and recommendation systems. Graph databases use nodes and edges to
  represent data relationships and can perform complex queries quickly and
  efficiently. Popular graph NoSQL databases include Neo4j and OrientDB.

References
==========

.. note::

  You can search the title in Google Scholar to find the pdf file.

.. rubric:: References

.. [#] "The NoSQL Know-It-All Compendium", kdnuggets.com, `link <nosql know all_>`_
.. [#] "NoSQL for Beginners", kdnuggets.com, `link <nosql beginner_>`_
.. [#] Khasawneh, Tariq N., Mahmoud H. AL-Sahlee, and Ali A. Safia. "Sql, newsql, and nosql databases: A comparative survey." 2020 11th International Conference on Information and Communication Systems (ICICS). IEEE, 2020.
.. [#] RUNCEANU, Adrian, et al. "SHORT REVIEW OF SOME NOSQL DATABASES." Fiability & Durability/Fiabilitate si Durabilitate 1 (2022).
.. [#] Gessert, Felix, et al. "NoSQL database systems: a survey and decision guidance." Computer Science-Research and Development 32 (2017): 353-365.
.. [#] "ACID vs. BASE: Comparison of Database Transaction Models", phoenixnap.com, `link <consistency model_>`_
.. [#] Lourenço, João Ricardo, et al. "Choosing the right NoSQL database for the job: a quality attribute evaluation." Journal of Big Data 2.1 (2015): 1-26.

.. _nosql know all: https://www.kdnuggets.com/2021/05/nosql-know-it-all-compendium.html
.. _nosql beginner: https://www.kdnuggets.com/2020/12/nosql-beginners.html
.. _consistency model: https://phoenixnap.com/kb/acid-vs-base

