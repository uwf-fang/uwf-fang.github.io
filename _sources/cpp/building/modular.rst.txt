*******************
Modular Development
*******************
Modular development is the process of subdividing a program into separate
sub-units known as modules. A module is a separate software component. It can
often be used in a variety of applications and functions with other components
of the system.

The advantage of modular development include:

1. Ease of code organization/management
2. Reusability
3. Ease of maintenance (testing, collaboration, etc.)

Life Cycle of a C++ Executable
==============================

.. image:: /_static/cpp-build-process.png

Multi-file Organization in C++
==============================
The key component that allows the modular compilation in C++ is the
``#include`` directive which copies all contents from one file and paste at the
location at the directive.

As a convention, the sharable components are stored in the header files (hpp
files) and the private components are stored in the source files (cpp files).
Other textual files like .inc files are also used (not covered in our courses).

Public/sharable components in header (.hpp) files
-------------------------------------------------
#. Declarations of functions to be used in multiple cpp files
#. Declarations of classes to be used in multiple cpp files
#. Global variables (should avoid mutable global in most cases)
#. Declarations of types, type alias, macros, etc.
#. Class templates

Private components in source (.cpp) files
-----------------------------------------
#. Declarations of everything that will be only used in the current cpp file
#. Function/class method definitions

.. glossary::

  Header file (hpp file)
    The textual file to be included by other files to share public contents including public declarations of functions and classes, and public
    configurations(variables, macros, type alias, etc.).

  Source file (cpp file)
    The textual file to be compiled to create object file. They typically
    include private declarations, private configurations, and definitions of
    functions and methods,

Best Practices
==============
These are general rules. They should be followed most of the time especially
for beginners. They can be violate when you have a good reason and know what
you are doing.

+ Sort the ``#include`` directive correctly

  1. own header (paired header)
  2. headers in the same project
  3. third-party library headers
  4. system library headers

+ Only include headers as needed
+ Avoid include-all headers like bits/stdc++.h
+ Always add header guards
+ Minimize your header (move out contents to the cpp file as much as possible)
+ Follow a consistent naming convention for all files

.. _mod-pitfall:

Pitfalls in Modular Development
===============================
Many of these pitfalls are not wrong, but just not recommended at lease for
beginners. C++ is very flexible but following a good convention is more
beginner-friendly.

+ Not using header guards in header files
+ Put all declarations in the header file even though they are not shared
+ Wrong cases in the file names
+ Not following a strict naming convention of files
+ Use .h extension for C++ header files
+ Include cpp files like ``include "lib1.cpp"``
+ g++ commands with header files like ``g++ -std=c++14 -o main main.cpp
  lib1.hpp lib1.cpp``

Examples
========
Please refer to :doc:`make document</tools/make>` for modular examples.


.. toctree::
   :maxdepth: 1
   :caption: Related Readings:

   /cpp/building/gpp
   /tools/make
   /cpp/testing/testing
