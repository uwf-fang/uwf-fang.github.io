.. highlight:: c++
  :linenothreshold: 5

*****************
Memory Management
*****************

Memory regions
==============

:code: code
:static: global and static variables
:stack: local variables and function formal parameters
:heap: dynamic data (allocated by new)

Dynamic Memory Allocation
=========================

+ Data in heap
+ ``new`` creates the data structure in heap memory and returns a pointer (or
  array)

  .. code-block:: c++

    int *intPtr = new int;  // single variable
    int *array = new int[10];  // array
    MyClass *myObjPtr = new MyClass();  // object

+ ``delete`` destruct the data structure the pointer is pointing to and release
  the memory

  - always call delete on a pointer (array is a pointer)
  - add [] if the pointer is pointing to a list of memory blocks (array)

  .. code-block:: c++

    delete intPtr;
    delete [] array1;
    delete myObjPtr;

+ The allocated data in heap are known as **dynamic data**


Memory leak
===========

+ only happens in the heap memory
+ dynamic data allocated (new) but not released (delete)
+ likely to be overlooked in function and class definitions when the flow of
  control is not obvious

Other Memory Problems
=====================

+ Stack overflow because of massive function calls, e.g. recursion
+ Out-of-boundary array indexing
+ Oversized C string copying
+ Uninitialized pointer
+ Deleting the same pointer multiple times

Memory Problem Checking Tool
============================
The command line tool ``valgrind``, read instruction `here`__

.. __: https://valgrind.org/docs/manual/quick-start.html

Dynamic Data and Functions
==========================

Refer to the :ref:`Passing arrays around<pass-array>` section for details on how
dynamic data allows returning an array from a function.

You can return dynamic data that are not array also.
