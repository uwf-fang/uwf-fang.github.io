********************
Programming Projects
********************

Grading
=======
The grading system of complex projects differs greatly from that used in
entry-level courses and in coding questions in exams:

+ Most of the grades are functionality based. **Your code must compile and run**
  to allow the grader to test the functionality. It means that you will lose
  most if not all of these grades if your code cannot be compiled and run.
+ A program compiles and runs through makefile or other building system using
  commands like ``make && ./main``, ``make test``, ``make test-run``, etc. When
  the project is collected using GitHub Classroom, the GitHub Action based
  auto-grading system will be used to grade the functionalities. A working
  makefile is the prerequisite of a compile-and-run project.
+ You should not expect any partial credit for code that cannot be tested by
  running your program. The grader do not have the responsibility to read and
  understand your source code.

You may read the :ref:`project FAQ <proj-faq>` for more information.

Project Workflow
================
This workflow is beginner oriented. Students may develop their own workflow as
they gain experience in programming. However, there is still something even the
experienced students can learn from here.

In this workflow I assume that you start from a problem description to finish an
application or a library to solve the problem. In the real-world projects, many
steps are already finished and you will be asked to start from implementation
specification such as UML class diagrams, detailed descriptions of functions or
classes. You will be skipping the design/modeling step in these cases.

#. Understand the problem

   Read the description carefully! Clarify obscure or ambiguous descriptions
   with your instructor. Estimate the complexity of the whole project and make a
   time management plan.

#. Analyze and model the problem (two approaches)

   + use top-down design to break the questions into functions (tasks)
   + use object-oriented design to break the question into classes

#. Plan your project directory

   Consider the directory structure of the project, the files to create, the
   makefile to write, etc.

#. Make a skeleton of the project

   Create all files including cpp files, hpp files, supporting
   data/configuration files, and a makefile. Fill them with empty functions,
   empty classes, header guards, know includes, etc.

   .. note::

     A skeleton repository may be provided for you to use in a GitHub
     Classroom-based assignment. Run ``git clone <URL>`` to clone it to your
     computer. It may also be provided as a zip file downloadable from
     elearning.

#. Iterative development

   #. Backup your files (three options)

      + best with a version control system like git. Just add and commit using
        ``git add .`` and ``git commit -m "commit message"``
      + compress the directory and give it a serial number or a date time stamp
      + duplicate the directory and give it a serial number or a date time stamp

   #. Pick a unit to work with

      + start from the simple units first ("simple" means simple in logic and
        not depending on other units)
      + move on to units depending on finished units

   #. Write code in small units (function, class, class method)
   #. Write a test driver (with or w/o a testing framework)
   #. Write rules in makefile to build the tests
   #. Run tests
   #. Debug
   #. Proceed to the next iteration

#. Perform a final test (two options)

   + push to GitHub classroom and check the results
   + transfer your file to the SSH server and test run

#. Submission

   + GitHub classroom

     Simply ``git push origin master``. You may have already done that during
     tests.

  + Canvas file upload

     #. Duplicate your directory
     #. Remove files not needed in the submission
     #. Compress your file using either zip or tar.gz (tgz) format
     #. Find the Canvas assignment page and upload
     #. Visit the page again to confirm the uploaded file is there


.. note::

  This workflow is designed for C/C++ project but is applicable to projects
  written in other general purpose languages such as Python and Java. The
  major difference is that the building system is no longer GNU make. You will
  be using setup.py, wheel or poetry for Python, and Maven, Gradle, or Ant for
  Java.

  You may learn more about how to write makefiles here: :doc:`document</tools/make>`.

Provided Tests
==============
+ Tests are provided in some starting code bases to facilitate auto-grading.
+ Students are not supposed to change source codes in the test directory.
+ Make sure your filenames follows the naming convention so the makefile will
  work properly. The convention requires all lowercase filenames.
+ Complete the makefile as needed.
+ Run ``make test-all`` to test.
+ You can find other test-xxx kind of targets in your makefile to run tests
  separately.
+ Make good use of these tests locally to test your code.
+ The automatic grading will be based on the tests runs.

Avoid Common Mistakes
=====================

1. Avoid over-engineering

   + Understand the problem and requirements very well
   + Work toward a just-enough solution (follow the instruction) rather than a
     perfect solution
   + Choose the simplest (simple to use) data structures, not the fastest or
     coolest ones (e.g. choose vector over C array, string over C string)

#. Avoid wasting time on anything not required in the instruction

   + Read instruction carefully
   + Ask questions if you are not sure

#. Avoid last minute rush

   + Projects are usually more challenging than you think
   + You will not learn much in the rush

#. Avoid writing code without testing

   + Any project beyond a certain size should be finished in an incremental
     manner and tested in every step
   + In the future, you may want to learn a testing framework but for now tests
     can be as simple as an extra .cpp file with a main function to run the
     classes or functions you just finished. Just feed the object/function with
     some input data and check the output. Testing code should be in a separate
     cpp file
   + A testing framework (e.g. Catch2) will greatly improve this process but
     need learning
   + A final test on the SSH server recommended to avoid compatibility problems
     (not necessary if your code are graded on GitHub)

#. Avoid working without backing up your code

   + It is common to lose important code snippet by mistake
   + You will hesitate to try new idea
   + Do backup your changes frequently
   + Do keep a log of your progress
   + If possible, using a version control system is the best solution
