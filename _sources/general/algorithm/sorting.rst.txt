.. highlight:: c++
  :linenothreshold: 5

******************
Sorting Algorithms
******************

Overview
========
+ Visualizations

  Due to the complexity of the sorting algorithms. Visualizations may greatly
  enhance the learning process. Below are two useful websites providing
  visualizations of common algorithms and data structures.

  * `visualgo.net <https://visualgo.net/en/sorting>`_
  * `Data Structure Visualization <https://www.cs.usfca.edu/~galles/visualization/Algorithms.html>`_

+ Categories

  All algorithms not mentioned in the book is for your information only. Only
  algorithm with bold names are covered in the book.

  * Comparison based

    - Selection
    - Insertion
    - Bubble
    - Shell
    - Quick
    - Merge
    - Heap

  * Non-comparison based

    - Bucket
    - Radix
    - Counting

  * Divide-and-conquer :math:`O(nlog(n))`

    - Quick
    - Merge

  * simple :math:`O(n^{2})`

    - Selection
    - Insertion
    - Bubble

  * Hybrid

    - Tim sort: combination of merge sort and insertion sort

+ Time complexity

  * simple :math:`O(n^{2})`: insert, selection, bubble
  * fast :math:`O(nlog(n))`: quick, merge, heap
  * linear: radix :math:`O(nk) = O(n)`, bucket :math:`O(n + k) = O(n)`

+ Space complexity

  * in-place (swap based) :math:`O(1)`

    - most sorting algorithms except merge sort, bucket sort, and radix sort

  * not-in-place (out-of-place) :math:`O(n)`

    - merge sort
    - bucket sort
    - radix sort

Implementation Variations
=========================
+ Sorting an array

  * Array property

    - fast access by index
    - slow reconstruction of new array
    - slow insertion and deletion of elements except at the end

  * best fit: in-place algorithms that swaps elements
  * less efficient: out-of-place algorithms that creates new arrays and moves
    data around frequently

+ Sorting a linked-list based

  * Linked-list property

    - slow access by index
    - fast reconstruction of new list
    - fast access to neighboring nodes

  * best fit: insertion sort, merge sort, bucket sort
  * not suitable: shell sort, and heap sort require slow access by index
