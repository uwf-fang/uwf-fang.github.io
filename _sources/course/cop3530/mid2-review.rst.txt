**********************
Midterm 2 Topic Review
**********************

How to use this document
========================
+ All contents covered in Midterm I will not be specifically tested but will
  likely to be used in the questions.
+ Self-test using this document to see what concepts are challenging to you
+ Course notes document is the main resource for tips, pitfalls. High priority
  in midterm preparation.
+ Review all participation activities and challenge activities in zyBook
+ Practice your ability to finish the patterns listed here from scratch without
  the help from any editor/ IDE

Templates
=========
Concepts
--------
Templated functions or classes are templates, not functions or classes any
more. They must be instantiated to give concrete functions or classes

Syntax
------
+ The template clause must be used right above all entities using the typename

  * function declarations and definitions
  * class declarations
  * method definitions

+ Splitting templates into multiple files is tricky.

  * Put in a single hpp is the easiest way.

Linked-List
===========
Implementations
---------------
+ singly-linked

  * head pointer
  * tail pointer (optional)
  * node with next pointer

+ doubly-linked

  * head pointer
  * tail pointer (optional)
  * node with next and prev pointers

+ with dummy node (make the head node not a special node and avoid empty list)
+ circular (not useful)
+ compare and contrast
+ methods

  * recursive vs iterative
  * first, last and middle nodes handled differently
  * destructor
  * search
  * insert before
  * insert after
  * remove (IMPORTANT)

Vs Array
--------
+ Pro: faster insertion, removal in the middle; variable size
+ Con: more storage space; slow access by index to middle elements

Sequential ADTs
===============
List
----
Sequential; add and remove anywhere; access by index

Stack
-----
Sequential; add and remove at one end;

Queue
-----
Sequential; add at one end and remove at another end;

Deque
-----
Sequential; add and remove at both ends;

Wrapper
-------
+ One ADT can cover the usage of another ADT
+ Wrapper class
+ E.g. wrap the std::vector class to implement a Stack
+ E.g. wrap Deque to implement Stack and Queue

Choose Implementations
----------------------
+ Depends on whether common operations are efficient.
+ Depends on the algorithm

Sorting
=======
+ Complexities

  * fast or not
  * general purpose (usually comparison based) or not
  * best complexity for comparison based sorting algorithms :math:`O(NlogN)`

+ Quick sort

  * pivot selection - start, end, middle, random
  * Quick partition - Hoare's algorithm

+ Merge sort

  * top-down merge sort
  * out-of-place algorithm
  * space complexity ``O(N)``

+ Radix sort

  * not a general algorithm
  * out-of-place algorithm

+ Linked-list based sorting

  * recursive vs iterative
  * insertion

    - sorted insert

  * merge

    - sorted merge

Hashing
=======
+ Hash function

  * collision

Hash table
----------
+ Hash table

  * Characteristics

    - fast lookup
    - redundant storage space
    - performance degradation when overfilled

  * buckets
  * hash function

    - key -> index
    - modulo operator

  * collision resolution

    - chaining
    - probing

      + linear :math:`[h(key) + c*i]\%n`
      + quadratic :math:`[h(key) + c*i^2]\%n`
      + double hashing :math:`[h1(key) + c*i*h2(key)]\%n`

+ ADTs based on hash tables

  * map
  * set

Patterns
========
+ Write a templated function
+ Write a templated class
+ Write class declarations of all sequential ADTs
+ Write methods of common operations of linked-lists
+ Write sorting algorithms as functions (take C array as parameter)
+ Mimic sorting algorithms on paper (e.g. quick partition)
+ Write insertion sort on linked-list
+ Mimic multiple insertion, removal and look up operations on a simple hash
  table

  * Calculate probing sequence by hand
  * Mimic probing methods on paper

+ Mimic algorithms

  * result after n rounds
  * how many comparisons/swaps
