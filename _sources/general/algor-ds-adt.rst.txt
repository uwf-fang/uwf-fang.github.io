************************************************
Algorithm, Data Structure and Abstract Data Type
************************************************

All the concepts discussed here assumes the imperative programming paradigm.
Things will be different in other programming paradigms like declaration,
functional, etc.

Definitions
===========

.. glossary::

  Algorithm
    A collection of steps to solve a problem. Either abstract or concrete.

  Data Structure
    An efficient solution of data organization, management and storage format.
    It is a concrete implementation.

  Abstract Data Types (ADT)
    An abstract mathematical model of data types. It defines the behavior from
    the user perspective. Only interfaces are defined without implementation
    details. ADTs are not language specific.

Relationships
=============

Algorithm is a general concept. An algorithm can be part of another algorithm.
An algorithm can be part of a data structure. An algorithm may also require a
certain ADT or data structure in its implementation.

An ADT may have multiple implementations to fit various application
requirements. Each implementation may involve certain algorithms and data
structures.

A data structure may consists of other data structures and certain algorithms.

For example:

+ The quick sort algorithm usually works on an array data structure, it
  requires another quick select algorithm.
+ The breadth-first search algorithm is part of the graph ADT. It requires a
  queue ADT in its implementation.
+ The stack ADT has various implementations using array or linked-list data
  structures.

