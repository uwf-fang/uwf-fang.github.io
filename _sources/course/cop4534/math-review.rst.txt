*******************************************
Math Concepts Review For Algorithm Analysis
*******************************************

Exponents
=========

Exponents overview
------------------
An exponent is a way of expressing repeated multiplication. Consider an
expression like :math:`a^n`, where :math:`a` is the base and :math:`n` is the
exponent. It signifies multiplying :math:`a` by itself :math:`n` times.
Mathematically, it can be written as:

.. math::

  a^n = \underbrace{a \times a \times a \times \ldots \times a}_{n \text{ times}}

For example, :math:`2^3` means :math:`2` raised to the power of :math:`3`,
which is :math:`2 \times 2 \times 2 = 8`. Exponents can be integers, fractions,
decimals, or even negative numbers.

Properties
----------
#. **Product Rule:** :math:`a^{m+n} = a^m \times a^n`
#. **Quotient Rule:** :math:`a^{m-n} = \frac{a^m}a^n}`
#. **Power Rule:** :math:`(a^m)^n = a^{m \cdot n}`
#. **Negative Exponent Rule:** :math:`a^{-n} = \frac{1}{a^n}`
#. **Zero Exponent Rule:** :math:`a^0 = 1`

Scientific Notation
-------------------
Exponents are used to represent very large or very small numbers in a concise form, known as scientific notation. It's written as :math:`a \times 10^n`, where :math:`a` is a number between 1 and 10, and :math:`n` is an integer. For example, :math:`6.022 \times 10^{23}` represents Avogadro's number in chemistry.

Logarithm
=========

Logarithm overview
------------------
A logarithm is the inverse operation of exponentiation. It helps you solve for
the exponent in an equation like :math:`a^x = b`. In other words, if you have
:math:`2^x = 8`, the logarithm base 2 of 8 is 3 (written as :math:`\log_2(8) =
3`). Logarithms are used to simplify complex calculations, especially in fields
like science and engineering.

The logarithm base :math:`b` of a number :math:`x` is denoted as
:math:`\log_b(x)`. The base :math:`b` is usually chosen to be a positive number
greater than 1, but not equal to 1. Logarithms have the property that
:math:`\log_b(b^x) = x` and :math:`b^{\log_b(x)} = x`, which reflect their
inverse relationship with exponentiation.

Properties
----------
1. **Logarithmic Identity:** :math:`\log_b(b^x) = x`
2. **Exponential Identity:** :math:`b^{\log_b(x)} = x`
3. **Product Rule:** :math:`\log_b(xy) = \log_b(x) + \log_b(y)`
4. **Quotient Rule:** :math:`\log_b\left(\frac{x}{y}\right) = \log_b(x) - \log_b(y)`
5. **Power Rule:** :math:`\log_b(x^n) = n \cdot \log_b(x)`

Series
======
In mathematics, a series refers to the sum of the terms in a sequence. A
sequence is an ordered list of numbers or other mathematical objects, while a
series is the result of adding these terms together in a specific order. Series
play a fundamental role in various mathematical disciplines and have
applications in numerous real-world scenarios, ranging from physics and
engineering to finance and computer science.

Mathematically, a series can be denoted as follows:

.. math::

  a_1 + a_2 + a_3 + \ldots + a_n + \ldots

+ :math:`a_1, a_2, a_3, \ldots` are the terms of the sequence.
+ :math:`n` represents the position of the term in the sequence.
+ The ellipsis :math:`\ldots` indicates that the sequence continues
  indefinitely.

Series can be classified into various types based on the behavior of their
terms. Two common types are arithmetic series and geometric series:

Arithmetic Series
-----------------
In an arithmetic series, each term is obtained by adding a
constant difference to the previous term. For example, 2, 5, 8, 11, ... is an
arithmetic series with a common difference of 3.

The sum of the first :math:`n` terms of an arithmetic series can be calculated using the formula:

.. math::

  S_n = \frac{n}{2} \cdot (2a + (n-1)d)

where:

+ :math:`n` is the number of terms,
+ :math:`a` is the first term, and
+ :math:`d` is the common difference between terms.

Geometric Series
----------------
In a geometric series, each term is obtained by multiplying the previous term
by a constant ratio. For example, 3, 6, 12, 24, ... is a geometric series with
a common ratio of 2.

The sum of the first :math`n` terms of a geometric series can be calculated using the formula:

.. math::

  S_n = \frac{a \cdot (1 - r^n)}{1 - r}

where:

+ :math:`a` is the first term,
+ :math:`r` is the common ratio between terms, and
+ :math:`n` is the number of terms.

Applications in Computer Science
--------------------------------
In computer science, series are used to analyze the complexity of algorithms.
For example, the time complexity of an algorithm can be expressed as a series,
where each term represents the time taken by the algorithm at a particular
step. The sum of the series gives the total time taken by the algorithm to
complete its execution.

For example:

In a selection sort algorithm, the time taken to find the minimum element in
the unsorted part of the array is :math:`n + (n-1) + (n-2) + \ldots + 1`, where
:math:`n` is the size of the array. This is an arithmetic series with a common
difference of 1. The sum of the series is :math:`\frac{n(n+1)}{2}`, which is
the time complexity of the selection sort algorithm.


Modular Arithmetic
==================
Modular arithmetic is a mathematical concept that deals with remainders when one integer is divided by another. It's a unique arithmetic system with applications in various fields, including number theory, cryptography, computer science, and more.

The Modulus Operation
---------------------
In modular arithmetic, we work with a fixed positive integer called the
**modulus**, often denoted as :math:`m`. When you perform a modulus operation
(denoted by :math:`mod`) on an integer :math:`a` with respect to :math:`m`,
you're essentially finding the remainder when :math:`a` is divided by
:math:`m`.

For example:

+ :math:`15 \mod 7` yields a remainder of 1 because :math:`15` divided by
  :math:`7` leaves a remainder of :math:`1`.
+ :math:`23 \mod 5` gives a remainder of 3, as :math:`23` divided by :math:`5`
  has a remainder of :math:`3`.

Congruence
----------
A fundamental concept in modular arithmetic is **congruence**, denoted as
:math:`a \equiv b \pmod{m}`. This means that :math:`a` and :math:`b` have the
same remainder when divided by :math:`m`. In other words, :math:`a` and
:math:`b` are equivalent in the modular arithmetic sense with respect to
:math:`m`.

For example:

+ :math:`17 \equiv 3 \pmod{7}` because both :math:`17` and :math:`3` leave a
  remainder of :math:`3` when divided by :math:`7`.

Applications in Computer Science
--------------------------------
In programming, modular arithmetic is useful for tasks like array indexing
(circular buffers), random number generation, and hashing.


Proof methods
=============
In mathematics, a proof is a logical argument that establishes the truth of a
statement. It's a way of showing that a mathematical statement is true based on
an established set of axioms and inference rules. Proofs are essential to the
development of mathematics because they convey mathematical knowledge with
certainty.

There are various methods of proof that can be used to establish the validity
of a mathematical statement. Some of the most common methods are:

+ Direct proof
+ Proof by contradiction
+ Proof by induction
+ Proof by contrapositive
