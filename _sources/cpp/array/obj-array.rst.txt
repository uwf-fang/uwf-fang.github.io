.. highlight:: c++
  :linenothreshold: 5

Object Array
============

Multiple arrays
---------------

+ store data in various arrays, same index means same record

  E.g. grades[i] and names[i] refers to the grade and name of a same student

  ::

    const int NUM_STUDENT = 100; // max number of students
    double grades[NUM_STUDENT];
    string names[NUM_STUDENT];
    names[4] = "John Smith";
    grades[4] = 100;
    cout << "The 5th student in the list " << names[4] << " has a grade of " << grades[4];

+ old-fashion approach inherited from C language

Array of objects
----------------

+ Better alternative to the multiple array approach

::

  struct Student {
    double grade;
    string name;
  };

  Student students[NUM_STUDENT];
  students[4].name = "John Smith";
  students[4].grade = 100;
  cout << "The 5th student in the list " << students[4].name << " has a grade of " << students[4].grade;

  class Student1 {
    double grade;
    string name;
   public:
    Student1(): name(""), grade(0) {}
    Student1(string name, double grade): name(name), grade(grade) {}
    string getName() { return name;}
    double getGrade() { return grade;}
  };

  Student1 students1[NUM_STUDENT];  // default constructor called 100 times
  students1[4] = Student1("John Smith", 100);  // temporary object assignment
  cout << "The 5th student in the list " << students1[4].getName() << " has a grade of " << students1[4].getGrade();

Array of pointers to objects
----------------------------
+ Better efficiency of memory usage, less memory allocation
+ Complex syntax

::

  Student1 *students2[NUM_STUDENT];  // 100 pointers
  students2[4] = new Student1("John Smith", 100);
  cout << "The 5th student in the list " << students2[4]->getName() << " has a grade of " << students2[4]->getGrade();

