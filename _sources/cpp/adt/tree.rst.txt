********
Tree ADT
********

Tree
====
In computer science, tree is a kind of constrained directed acyclic graphs that
models hierarchical structures. In graph theory, trees are defined differently
as connected undirected acyclic graphs.

Concepts
--------
+ Node (Vertex in graph theory)

  * root node
  * internal nodes
  * leaf nodes
  * level/depth
  * degree

+ Edge
+ Connectivity

  * path
  * distance

+ Relationships

  * parent/child
  * ancestor/descendant
  * siblings

+ Tree properties

  * degree
  * height
  * ordered/unordered

Applications of Trees
---------------------
* File system (directory, sub-directory, and file)
* Decision making (decision tree)
* Indexing (binary search tree)
* Parsing tree
* Heap (complete binary tree)
* Blockchain (Merkle tree)
* Search-based Artificial Intelligence

Tree Glossary
-------------

.. glossary::

  Tree
    A collection of nodes. Each node have a value and refers to zero to n other
    nodes (child nodes)

  Root
    start point of a tree with no other nodes referring to it (not a child of
    any other node)

  Parent
    A node is another node's parent node if it refers to another node

  Child
    A node is another node's child node if it is referred by another node

  Sibling
    A node is another node's sibling node if they share the same parent

  Leaf node
    nodes with no child

  Internal node
    nodes being a child of another node and has a least one child

  Degree of a node
    The number of child nodes

  Degree of a tree
    The maximum degree among all nodes

  Edge/Link
    The relationship between a parent and its child

  Ancestor
    A node reachable by repeated proceeding from child to parent

  Descendant
    A node reachable by repeated proceeding from parent to child

  Path (Tree)
    The number of edges from a node to another; Only between an ancestor and on
    of its descendant

  Distance (tree)
    The number of edges found in a path

  Level/Depth
    The level of a node is the distance from the root node. Nodes can be grouped by levels. Children of a node in level n are in level n + 1

  Height (tree)
    The longest path in a tree; Always start from the root

  Subtree
    A node with all of its descendants

  Ordered Tree
    A tree in which sibling nodes are ordered

  Unordered Tree
    A tree in which sibling nodes are unordered

Binary tree
===========
Binary trees are ordered trees with degree of 2. Each node have at most two
child nodes known as left and right child.

Concepts
--------
+ left/right child
+ variations

  * full binary tree
  * complete binary tree
  * perfect binary tree

Applications of binary trees
----------------------------
+ Expression parsing
+ Decision tree
+ Heap

Binary Tree Glossary
--------------------
.. glossary::

  Full binary tree
    A binary tree in which every node has 0 or 2 children

  Complete binary tree
    A Binary Tree is a Complete Binary Tree if all the levels are completely
    filled except possibly the last level and the last level has all keys as
    left as possible

  Perfect binary tree
    A binary tree with all level filled

Binary search tree
==================
A binary search tree (BST) is a binary tree in which for every node, its left
child has a smaller value than itself while its right child has a greater value
than itself

Behaviors
---------
+ Search
+ Insert
+ Remove
+ Traversal: Visit all nodes in a tree in a certain order

  * in-order

    - overall: from smallest to greatest
    - for each node: left-subtree, self, right-subtree

+ Get height

Variation
---------
+ self-balanced trees

Applications of BST
-------------------
+ Indexing
+ Tree Sort
+ Tree Map
+ Tree Set

Implementation
--------------
* general BST

  .. code-block:: c++

    template <class T>
    class Node {
    public:
      T value;
      Node * left;
      Node * right;
    };

    template<class T>
    class BinarySearchTree {
    private:
      Node *root;
    public:
      ~BinarySearchTree();
      Node *search(T value);
      void insert(T value);
      bool remove(T value);
      int height();
    }

* with parent pointer

  .. code-block:: c++

    template <class T>
    class Node {
    public:
      T value;
      Node * left;
      Node * right;
      Node * parent;
    };

  * recursive methods

    - search
    - insert
    - remove

