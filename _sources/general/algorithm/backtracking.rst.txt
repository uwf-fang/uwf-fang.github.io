************
Backtracking
************

An algorithm that incrementally build candidates toward the solution and reject
candidates as soon as it is known not to lead to any solution. It searches
paths in a decision tree space and allows early pruning of branches. When a
candidate is abandoned it **backtracks** to a prior state and search for the
next candidate.

Implementation
==============
+ Recursive approach
+ Iterative approach

  * Stack data structure

+ Variations according to the goal

  * find one solution
  * find all solutions

Application Domain
==================
Backtracking algorithms are often used for optimization problems and
combinatorial problems, where you need to search through a large solution
space. They can be very efficient when implemented correctly, as they prune the
search space by discarding branches that are guaranteed not to lead to a
solution.

.. backtracking-example:

Example problems
----------------
+ Sudoku
+ Eight queens
+ Cross-word

.. backtracking-exhaustive-comp:

Comparison
==========
.. list-table:: Backtracking vs Brute-force
  :header-rows: 1
  :stub-columns: 1
  :widths: 20 30 30

  * -
    - Backtracking
    - Brute-force
  * - Search space
    - Generate part of the intermediate and final states
    - Generate all intermediate and final states
  * - Constraint application
    - Reject partial solutions
    - Validate final states
  * - Run-time
    - fast
    - slow
  * - Implementation
    - Stack/Recursion
    - Nested Loops/Recursion
  * - Problem type
    - find one/find all
    - usually find all
