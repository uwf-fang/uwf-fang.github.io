************************
Git and GitHub Classroom
************************

git
===

Git is the most widely used distributed version control system (VCS). It enables
efficient workflows to work with source codes and other textual documents. The
``git`` command is the main command to invoke the functionalities of the git
system in a command-line environment. Because git is extremely feature-rich,
some workflows can be very complicated. We will start with some simple ones.

linear workflow
---------------

For beginner such as students learning VCS at the first time. You can stick with the linear workflow without branching. In this workflow: You will stick to a single master branch and only take advantage of the snapshot and history logging features. In this workflow you will:

#. Start your repository by either

   * clone a repository: ``git clone <URI>``
   * initiate a new repository: ``git init``

#. Edit files in the repository
#. Periodically take snapshot and log it using a commit message

   #. ``git add .`` to add the current directory
   #. ``git commit -m "commit message"`` to take a snapshot (commit) and create
      a log item for the commit

#. Push to the server to synchronize with others (optional if you do not
   collaborate/backup/submit assignment using a hosted repository)

Important Subcommands and Concepts
----------------------------------

.. glossary::

  Working directory
    The directory where the repository is stored.

  Staging area
    A temporary storage to keep files you wish to add to the database. Run ``git add`` to add file to the staging area and use ``git commit`` to store everything in the staging area to the database

  Commit
    A commit is a snapshot of the working directory stored in the database; Each
    commit has a commit message and a unique hash value bound to it

  .gitignore
    A text file to specify the patterns of files to ignore by git. Used to avoid temporary files or large binary files to be included in the database

  git clone
    Clones a repository from a remotely hosted repository

  git init
    Create an empty git repository in the current directory

  git add
    Add files to the staging area of git. You can run ``git add .`` to add
    everything recursively in the current directory. Run ``git add
    path-to-file`` to add a file or directory

  git status
    Run ``git status`` to check the status of the current repository. It will
    show you updated and new files not in the staging area, and files added in
    the staging area.

  git commit
    Run ``git commit -m "commit message"`` to store everything in the staging
    area to the database with a message.

  git push
    Run ``git push origin master`` to push to the remote repository named
    ``origin`` with the remote branch being ``master``

  git log
    Run ``git log`` to see the history of the past commits.

GitHub Classroom
================

The GitHub Classroom is a service from GitHub.com. It is free of charges for
educational usage. It is a great way to assign, collect and grade programming
assignments.

To use GitHub Classroom for assignment, follow the following steps:

#. Accept the assignment

   An invitation link will be sent to you. Open it in a browser. For the first
   time, you will be asked to log in to GitHub (create one if you do not have)
   account and select your name in the roster to bind to your GitHub account.
   **Never skip the roster** when you are asked to bind the account. Unlinked
   accounts will bring in many problems in the grading process.

   A project repository will be created for you and you can refresh the page after several seconds to get the URL to your repository.

#. Follow the general project workflow in this :doc:`document</cpp/project>` to
   finish and submit your project

Tests
=====
+ Students are not supposed to change things in the test directory
+ Make sure your filenames follows the naming convention so the makefile will
  work properly. The convention requires all lowercase filenames.
+ Run ``make test-all`` to test
+ You can find other test-xxx kind of targets in your makefile to run tests
  separately