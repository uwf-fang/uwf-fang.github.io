******************
Abstract Data Type
******************

Definition
==========
An Abstract Data Type (ADT) is a high-level mathematical model that defines a
set of data values and a set of operations that can be performed on those
values, without specifying how the data is represented or how the operations
are implemented. It provides a clear interface for interacting with data,
allowing programmers to focus on the functionality of the data structure rather
than its implementation details. ADTs are essential in computer science for
organizing and managing data efficiently, and common examples include stacks,
queues, lists, and trees.

Context
=======
+ High-level abstraction of data structures.
+ Usually defined as ``Interface`` in various programming languages.
+ May have multiple implementations.

Characteristics
===============
+ Encapsulation: ADTs encapsulate data and operations into a single unit,
  providing a well-defined interface for interacting with the data while hiding
  the internal details. This concept is closely related to the idea of data
  abstraction.
+ Implementation independence: ADTs are independent of their implementation,
  meaning that the interface is defined in such a way that it does not depend
  on the underlying implementation. This allows the implementation to be
  changed without affecting the interface.
+ Abstraction: ADTs abstract away the low-level details of data manipulation,
  focusing on high-level behaviors and operations. This abstraction simplifies
  complex data structures and algorithms, making them easier to understand and
  use.
+ Modularity: ADTs promote modular design by encapsulating data and operations
  within a self-contained unit. This modular approach enhances code
  organization and maintainability.
