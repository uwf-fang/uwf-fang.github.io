*****************
Genetic Algorithm
*****************
Definition
==========
**Genetic Algorithm (GA)**: A computational approach inspired by the process of
natural evolution, genetic algorithms are used to find approximate solutions to
optimization and search problems. They represent a fascinating intersection
between biology and computer science, offering a unique way to solve complex
problems.

Characteristics
===============
+ Optimal solution not guaranteed
+ Find a "good-enough" or near-optimal solution in a reasonable time
+ Non-deterministic
+ Population-based approach
+ Depend on randomness
+ Many parameters to tune

Historical Context
==================
The concept of genetic algorithms finds its roots in the early works of
scientists like John Holland who, in the 1960s, introduced the schema theorem
which describes the functioning of GAs. But the real inspiration comes from a
much older source â€“ Charles Darwin's theory of natural selection. Darwin
proposed that species evolve over generations by the survival of the fittest
individuals. This biological concept provided a framework for developing a new
class of computational algorithms.

Metaheuristic Paradigm
======================
Genetic algorithms belong to a broader category known as metaheuristics. The
term metaheuristic is derived from the Greek words "meta" (beyond) and
"heuriskein" (to search or find). They represent higher-level procedures or
strategies designed to find, generate, or select a heuristic that might provide
a sufficiently good solution to an optimization problem, especially with
incomplete or imperfect information or limited computation capacity.

Metaheuristics encompass a range of algorithms, including but not limited to:

+ Simulated Annealing
+ Tabu Search
+ Ant Colony Optimization
+ Particle Swarm Optimization

Like other metaheuristics, GAs aim to provide practical solutions to complex
problems where traditional methods are ineffective or too slow. They harness
inspiration from natural phenomena (in GA's case, natural evolution) to guide
the search process.


Basics of Genetics and Evolution
================================

+ **DNA, Genes, and Chromosomes**:

In biological systems, DNA (Deoxyribonucleic acid) is the molecule that carries
genetic instructions for the development, functioning, growth, and reproduction
of all known living organisms. DNA is organized into structures called
chromosomes, which are collections of genes. Each gene is a segment of DNA that
has a specific function or contains a particular piece of genetic information.

+ **Principles of Natural Selection**:

  * **Survival of the Fittest**: Not all individuals in a population have the
    same chances of survival and reproduction. Those with characteristics
    better suited to their environment tend to survive longer and reproduce
    more, passing on their genes to the next generation.

  * **Reproduction**: The process through which new individuals or offspring
    are produced. In the context of GAs, this refers to the generation of new
    potential solutions from the existing ones, based on their "fitness" or
    suitability to the problem.

  * **Mutation**: In biological terms, a mutation is a change in the DNA
    sequence. Mutations introduce genetic diversity, which can be beneficial,
    neutral, or harmful. For GAs, mutation means introducing small random
    changes in potential solutions to maintain diversity in the population and
    avoid getting stuck at local optima.

  * **Crossover**: Also known as recombination, this is a process where two
    parent genes exchange portions of their genetic information to create new
    offspring. In GAs, crossover combines elements of two potential solutions
    to produce a new one, hopefully combining the best features of both
    parents.

Core Components
===============
+ **Individual and encoding**

  An individual is a potential solution to the problem. It is typically
  represented as a string of bits, where each bit is called a gene. The term
  "bit" is used loosely here, and the encoding can be binary, integer, or
  real-valued. The string is known as the chromosome. The genes can be
  independent of each other. The string can also be interpreted as a
  permutation, where each gene represents a position in the permutation.

  E.g. A binary encoded individual with 5 genes: 10101; Traveling Salesman
  Problem: A permutation of the indices of cities. Each gene is an integer
  representing a city. The chromosome is a permutation of the cities.

+ **Population**

  At the heart of every GA is a population, which is essentially a collection
  of individual potential solutions to the problem. Each individual represents
  a possible solution, often encoded in some form, like a binary string. The
  initial population is typically generated randomly, ensuring a diverse range
  of potential solutions.

+ **Fitness Function**

  To determine which solutions are 'better' than others, GAs employ a fitness
  function. This function quantitatively measures how good each solution in the
  population is with respect to the given problem. For instance, if the problem
  is to find the shortest path between cities, the fitness might be the path
  length.

+ **Selection**

  Based on the principle of "survival of the fittest," the selection process
  chooses which solutions, or parents, will be used to create the next
  generation. There are various selection methods such as roulette wheel
  selection (where the probability of an individual being selected is
  proportional to its fitness) and tournament selection (where a subset of
  individuals are chosen, and the fittest among them is selected).

+ **Crossover (Recombination)**

  Once parents are selected, the crossover operation is used to combine their
  genetic information and produce offspring. There are many crossover
  techniques, such as one-point crossover (where one crossover point is
  selected and genes from one parent are combined with genes from another
  parent based on this point) and uniform crossover (where genes from both
  parents are mixed uniformly).

+ **Mutation**

  After crossover, mutation introduces small random changes in the offspring.
  The main purpose of mutation is to maintain genetic diversity within the
  population, ensuring that the GA does not converge prematurely to a
  sub-optimal solution. For instance, in a binary encoded GA, mutation might
  flip a 0 to a 1 or vice versa. In a permutation encoded GA, mutation might
  swap two elements in the permutation.

+ **Replacement**

  This step involves determining how individuals from the new generation
  replace those in the current generation. There are various strategies, such
  as generational replacement (where the entire old generation is replaced) and
  steady-state replacement (where only a portion of the old generation is
  replaced).

Pseudocode of a Basic Genetic Algorithm
=======================================
To better visualize the process of a genetic algorithm, here's a simplistic
pseudocode representation::

  1. Generate initial population of size N.
  2. Evaluate the fitness of each individual in the population.

  3. WHILE (stopping condition not met):
      a. Select two parents based on their fitness.
      b. Perform crossover on the selected parents to produce offspring.
      c. Apply mutation on the offspring with a certain probability.
      d. Evaluate the fitness of the offspring.
      e. Replace individuals in the current population with the new offspring based on a replacement strategy.
      f. OPTIONAL: Keep track of the best solution found so far.

  4. Return the best solution found.

By iterating through this process, the GA "evolves" the population of potential
solutions, gradually improving the fitness of the individuals, and getting
closer to an optimal or near-optimal solution.

Parameters
==========
The efficiency and effectiveness of a genetic algorithm (GA) are deeply
influenced by the choice of its parameters. Proper tuning of these parameters
can significantly boost the performance, while poor choices can hinder or stall
the algorithm. Let's delve into some of the fundamental parameters:

+ **Population Size**

  Refers to the number of individuals (potential solutions) in each generation.
  A larger population might offer greater diversity and potentially explore a
  wider solution space. However, it might also increase computational demands.
  A smaller population may run faster but risks premature convergence to
  suboptimal solutions.

+ **Crossover Rate**

  Determines how often crossover will occur between pairs of parents. A high
  crossover rate can enhance exploration of the solution space, while a low
  rate emphasizes exploitation of the current best solutions.

+ **Mutation Rate**

  Specifies the frequency with which bits in an individual's encoding will be
  flipped or altered. A higher mutation rate increases genetic diversity but
  can disrupt well-performing solutions. A very low mutation rate might make
  the algorithm stagnant and fall into local optima.

+ **Selection Pressure**

  Indicates the emphasis on selecting the fittest individuals as parents. High
  selection pressure might lead to faster convergence but risks losing
  diversity. Low pressure maintains diversity but can slow the convergence
  rate. This parameter is related to the selection method and replacement
  strategy.

+ **Number of Generations**

  The number of generations or iterations the GA will run for. It is only
  relevant when it is employed as the termination condition. A higher number of
  generations might lead to better solutions but can also increase
  computational demands.

+ **Importance of Balanced Parameter Setting**:

  Balance in setting GA parameters is crucial. Overemphasizing
  exploration (through high mutation and crossover rates) can cause the GA to
  behave almost random, while stressing too much on exploitation (low
  mutation and selecting only the very best individuals) might lead to
  premature convergence on suboptimal solutions.

  Often, the best approach is to conduct multiple experiments with different
  parameter settings to understand how each influences the GA's performance for
  a specific problem.

Representative Algorithms/Strategies
====================================
+ Selection Methods:

  * Roulette Wheel Selection: Individuals are selected with a probability
    proportional to their fitness.
  * Tournament Selection: A random subset of individuals is selected, and the
    fittest among them is chosen.
  * Rank Selection: Individuals are ranked based on their fitness, and the
    probability of selection is proportional to their rank.

+ Replacement Strategies:

  * Elitism: The best individuals from the old generation are carried over to
    the new generation.
  * Generational Replacement: The entire old generation is replaced by the new
    generation.
  * Steady-State Replacement: Only a portion of the old generation is replaced
    by the new generation. The rest of the individuals are carried over.

+ Crossover Techniques:

  * One-Point Crossover: A crossover point is selected, and genes from one
    parent are combined with genes from another parent based on this point.
  * Two-Point Crossover: Two crossover points are selected, and genes between
    the two points are swapped between the parents.
  * Uniform Crossover: Genes from both parents are mixed uniformly.

+ Mutation Methods:

  * Bit Flip Mutation: A random bit in the individual's encoding is flipped.
  * Swap Mutation: Two random genes in the individual's encoding are swapped.
  * Inversion Mutation: A random subset of genes in the individual's encoding
    is reversed.


Applications of Genetic Algorithms
==================================

Genetic algorithms have found diverse applications across multiple domains,
proving their adaptability and versatility. Here are some of the notable
applications:

+ **Optimization Problems**:

  * Traveling Salesman Problem: Finding the shortest possible route that
    visits a set of cities and returns to the origin city.
  * Job Scheduling: Allocating jobs to resources in a manner that optimizes
    specific objectives, such as minimizing completion time.

+ **Machine Learning**:

  * Feature Selection: Identifying the most relevant features in a dataset
    to improve model performance.
  * Neural Network Training: Optimizing the weights of neural networks to
    achieve better accuracy.

+ **Game Development**
+ **Art and Design**


Advantages and Limitations
==========================

Advantages
----------

1. **Versatility and Generality**: GAs can be applied to a wide variety of
   problems, from optimization tasks to design challenges, without requiring a
   deep understanding of the problem domain.
2. **Global Search Capability**: Thanks to their population-based approach, GAs
   can search multiple points in the solution space simultaneously, making them
   less prone to getting stuck in local optima compared to some other methods.
3. **Inherent Parallelism**: The nature of GAs, especially the evaluation of
   multiple individuals, lends itself to parallel computing, potentially
   speeding up the search process.
4. **Adaptability**: GAs can adapt to changing environments, making them
   suitable for dynamic problems where the fitness landscape might shift over
   time.

Limitations
-----------
1. **No Guarantee of Optimal Solution**: While GAs are good at finding
   "good-enough" or near-optimal solutions, they don't guarantee an optimal
   solution.
2. **Parameter Sensitivity**: The performance of a GA can be significantly
   influenced by its parameter settings (e.g., population size, mutation rate).
   It may require trial-and-error or domain knowledge to tune these parameters
   effectively.
3. **Computational Overhead**: Depending on the problem size and GA parameters,
   the algorithm might require a considerable number of generations and
   evaluations to converge, which could be computationally expensive.
4. **Premature Convergence**: GAs might sometimes converge too early to a
   suboptimal solution, especially if there's not enough genetic diversity in
   the population.

References
==========
+ `Wikipedia <https://en.wikipedia.org/wiki/Genetic_algorithm>`_
+ `Tutorialspoint <https://https://www.tutorialspoint.com/genetic_algorithms/genetic_algorithms_introduction.htm>`_
+ :doc:`Using Random Number Generators in C++ </cpp/rng>`
