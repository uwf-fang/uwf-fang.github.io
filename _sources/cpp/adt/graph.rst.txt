*****
Graph
*****
An ADT to model complex, non-linear relationships among entities.

Concepts
========
+ Vertex/Node

  * degree

+ Edge/Arc

  * directed
  * undirected
  * weighted

+ Connectivity

  * path between two vertices

    - length

  * distance between two vertices
  * adjacent
  * connected
  * cyclic
  * acyclic

+ Graph properties

  * directed/undirected
  * weighted/unweighted
  * cyclic/acyclic
  * connected/unconnected

.. graph-examples:

Examples
========
.. graphviz::
  :caption: Directed connected cyclic graph

  digraph G {
    node[shape=circle];
    a -> {b, c, d};
    b -> {a, d};
  }

.. graphviz::
  :caption: Undirected connected cyclic weighted graph

  graph G {
    node[shape=ellipse];
    Atlanta -- Dallas [label=4];
    Atlanta -- Miami [label=4];
    Atlanta -- Orlando [label=3];
    Dallas -- Austin [label=1];
    Dallas -- Orlando [label=6];
  }

.. graphviz::
  :caption: Undirected connected acyclic graph (Tree)

  graph G {
    node[shape=circle];
    b -- a;
    a -- {c, d};
    b -- {e, f};
  }

.. graphviz::
  :caption: Directed acyclic graph (DAG) task planning

  digraph G {
    rankdir=LR;
    node[shape=box];
    task1 -> task2;
    task2 -> {task3, task4};
    task3 -> {task5, task6};
    task4 -> task6;
  }

Internal Representations
========================
+ Adjacency list

  An adjacency list is a 1d array in which every element in the array represents
  a vertex and points to a list of its neighbors.

+ Adjacency matrix

  An adjacency matrix is a 2d array in which each row represents a source vertex
  and each column represents a destination vertex. The elements in the matrix
  represents the edge between the two vertices.

.. graph-representation-complexity:

Complexity
----------
Assume that we have a graph with :math:`V` vertices and :math:`E` edges. The
average number of neighbors is :math:`N`. For a full graph, :math:`N = V - 1`.
For a sparse matrix, :math:`N << V`.

.. list-table:: Adjacency list vs Adjacency Matrix
  :header-rows: 1
  :stub-columns: 1

  * -
    - Adjacency list
    - Adjacency matrix
  * - Space
    - :math:`O(V*N)`
    - :math:`O(V*V)`
  * - Check adjacency of two vertices
    - :math:`O(N)`
    - :math:`O(1)`
  * - Find all neighbors of a vertex
    - :math:`O(N)`
    - :math:`O(V)`

Graph Traversal
===============
+ Depth-first search (DFS)

  Starting from one vertex, visit all vertices along the path started from the
  starting vertex till then end of the path (no unvisited neighbors) and then
  backtrack.

  * iterative using a stack
  * recursive

+ Breadth-first search (BFS)

  Starting from one vertex, visit all other vertices in the order of the
  distances to the starting vertex.

  * iterative using a queue


Algorithms
==========

Dijkstra's shortest path
------------------------
Find the shortest path given a source and a destination vertex. Can be solved
using BFS. However, Dijkstra's approach is better. See `visualization`__

.. __: https://visualgo.net/en/sssp

+ invented by Edsger Dijkstra
+ employs a priority queue ADT

Graph Glossary
==============

.. glossary::

  Vertex/Node (Graph)
    Entities that are interconnected

  Edge/Arc (Graph)
    The connection between two vertices

  Adjacency
    Two vertices are adjacent if connected by an edge

  Neighbors (Graph)
    All vertices that are adjacent

  Path (Graph)
    A sequence of edges from one vertex to another

  Length of path (Graph)
    The number of edges along a path

  Distance (Graph)
    The length of the **shortest** path between two vertices

  Full graph
    A graph in which all vertices are connected to other vertices

  Sparse graph
    A graph in which the number of edge is way fewer than the number for a full graph with the same number of vertices

  Directed graph
    A graph in which every edge has a direction from one vertex to another

  Undirected graph
    A graph in which every edge is symmetric

  Cyclic Graph
    A graph in which you can always find at least a path that starts and ends on
    a same vertex

  Acyclic Graph
    Can not find any path that starts and ends on a same vertex

  Weighted graph
    A graph in which every edge has a weight

  Depth-first search (DFS, Graph)
    Starting from one vertex, visit all vertices along the path started from the
    starting vertex till then end of the path (no unvisited neighbors) and then
    backtrack.

  Breadth-first search (BFS)
    Starting from one vertex, visit all other vertices in the order of the
    distances to the starting vertex.
