************************************************************
Module 2 Math Review; Algorithm Analysis; Amortized Analysis
************************************************************
In module 2, we will review some of the math concepts that are important for
the algorithm analysis and data structures that we will cover in the course.
We will also explore more of algorithm analysis topics.

Math Review
===========
In this section, we will review some of the math concepts that are important
for algorithm analysis and data structures.

.. toctree::
   :maxdepth: 2
   :caption: Math review topics:

   math-review

Algorithm Analysis
==================

Motivation
----------
There are many reasons why we want to analyze algorithms.  One of the most
important reasons is to be able to compare algorithms.  For example, if we have
two algorithms that solve the same problem, we would like to know which one is
better.  We can compare algorithms based on their running time, memory usage,
or other factors.

Types of Analysis
-----------------
+ Empirical Analysis

  Empirical analysis involves running actual implementations of algorithms on
  real or simulated data and measuring their performance. This approach
  provides practical insights into how algorithms behave under specific
  conditions.

  .. code-block:: C++
    :caption: Empirical analysis using <chrono> library

    #include <iostream>
    #include <chrono>

    int main() {
        // Start the clock
        auto start = std::chrono::high_resolution_clock::now();
        // Call the function to be measured
        algorithm(parameter);
        // Stop the clock
        auto end = std::chrono::high_resolution_clock::now();
        // Calculate the duration
        std::chrono::duration<double> duration = end - start;
        // Print the duration in seconds
        std::cout << "Function took " << duration.count() << " seconds." << std::endl;
        return 0;
    }

+ Theoretical Analysis

  Theoretical analysis involves mathematically modeling and reasoning about
  algorithm behavior without the need for actual implementation or
  experimentation. This approach provides insights into how an algorithm scales
  as the input size grows.

.. toctree::
   :maxdepth: 2
   :caption: Theoretical Analysis topics:

   /general/complexity

Amortized Analysis
==================
Amortized analysis is a mathematical technique employed in the realm of
computer science and algorithm analysis. It offers a more refined and
comprehensive approach to evaluating the time complexity of algorithms that
involve a sequence of operations, especially those with variable costs.

Especially useful for data structures changes their size and structure
dynamically. Example including dynamic arrays, hash tables, self-balancing
binary search trees, and splay trees.
