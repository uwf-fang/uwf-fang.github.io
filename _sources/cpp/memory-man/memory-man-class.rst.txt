.. highlight:: c++
  :linenothreshold: 5

****************************
Memory Management in Classes
****************************

Implicitly-declared Methods
===========================
Some methods can be used without explicit declarations. They are usually methods
that are essential to the object including the default constructor, destructor,
copy constructor, copy assignment operator overloading, etc.

+ Default constructor

  * available to be used without explicit declaration when no constructor is
    present
  * must declare and define explicitly if any other constructor is present
  * use ``MyClass::MyClass()=default;`` if the default behavior is needed

+ Destructor
+ Copy constructor
+ Copy assignment operator overloading

.. note::

  Any implicitly-declared method can only handle non-dynamic instance variables.
  They must be explicitly declared and defined when they are triggered in
  objects containing dynamic data.

Dynamic data in class
=====================
+ pointer-typed instance variables

  * holding a single value or an array
  * allocated using ``new``

+ Potential memory problems

  * memory leak - fail to ``delete``

    - bad or no destructor
    - dynamic data passed around without correct handling

  * shallow copy - fail to copy the dynamic data in the heap memory

    - only the memory address are copied by default constructor/assignment
    - bad or no copy constructor
    - bad or no copy assignment operator overload
    - **only happens when objects are copied or copy assigned**
    - will consequently cause the destructor to ``delete`` a same memory
      block in heap multiple times

+ Rule of three

  * The **big three** methods needed for classes with dynamic data
  * destructor

    - **mandatory** because it will always be triggered
    - when an object is destroyed

      * local object going out of scope
      * dynamic object being ``delete`` d

    - place to ``delete`` dynamic data

  * copy constructor

    - explicit triggering ``MyClass obj1; MyClass obj2(obj1);``
    - implicit triggering

      + in initialization
      + ``MyClass obj1; MyClass obj2 = obj1;``

    - place to perform deep copy

  * copy assignment operator overload

    - triggering ``MyClass obj1; MyClass obj2; obj2 = obj1;``
    - implicit assignment

      + parameter passing by value
      + return as value

    - clean up old data
    - perform deep copy
    - ``return *this;``

  .. note::

    Even in classes with dynamic data, the implementation of the big three is not always mandatory. Only the destructor will always be triggered. Thus, **the copy constructor and the copy assignment operator overloading implementations can be omitted** if they are never triggered.

::

  class MyClass {
   private:
    int *arr;
    int size;
   public:
    MyClass();
    MyClass(int size);
    MyClass(const MyClass& other);
    MyClass & operator=(const MyClass& other);
    ~MyClass();
  }

  MyClass::MyClass() {
    size = 0;
    arr = nullptr;
  }

  MyClass::MyClass(int size) {
    this->size = size;
    arr = new int[size];
  }

  MyClass::MyClass(const MyClass& other) {
    // you can access private member of other directly!
    size = other.size;
    arr = new int[size];
    for (int i = 0; i < size; i++)
      arr[i] = other.arr[i];
  }

  MyClass & MyClass::operator=(const MyClass& other) {
    size = other.size;
    // must release memory of the old dynamic data first!
    if (arr != nullptr)
      delete [] arr;
    arr = new int[size];
    for (int i=0; i<size; i++)
      arr[i] = other.arr[i];
    return *this;  // IMPORTANT! return the current object by reference
  }

  ~MyClass::MyClass() {
    delete [] arr;
  }

+ Rule of five

  * Two more methods

    - Move constructor
    - Move assignment operator overloading

  * Not mandatory but will improve efficiency
  * New syntax since c++ 11 using ``&&``
  * Mutable parameter

::

  // the parameter is no longer 'const' because you will modify it
  MyClass::MyClass(MyClass && other) {
    // you can access private member of other directly!
    size = other.size;
    arr = other.arr;
    // must make the other object ready for destruction
    // without this step the destructor may try to delete the moved data
    other.arr = null;
    other.size = 0;
  }

  // the parameter is no longer 'const' because you will modify it
  MyClass & MyClass::operator=(MyClass && other) {
    // Swap both the size and arr with the other object
    // the destructor of the other object will destroy the data
    int tempSize = size;
    size = other.size;
    other.size = tempSize;
    int *tempArr = arr;
    arr = other.arr;
    other.arr = tempArr;
    return *this;
  }

Ownership of Dynamic Data
=========================
A dynamic data can be created and passed. As the ownership changed. The last
owner should take the responsibility to release the memory.

Passing dynamic data created outside as a parameter. The recipient owns the data
after.

::

  class DataType {
    // ...
  };

  class MyClass {
   private:
    DataType *myDynamicData;
   public:
    MyClass(DataType *initialData = nullptr) {
      myDynamicData = initialData;
    }
    ~MyClass() {
      // delete here although it is not new'ed in the class
      delete myDynamicData;
    }
  };

  int main() {
    DataType *initData = new DataType();  // main function owns it
    MyClass obj1(initData);  // obj1 owns it now

    return 0;
  }

You may also choose to remove the destructor and let the main function to delete
if you feel it make more sense that the recipients are only users of the dynamic
data. Sometimes the dynamic data is shared.

::

  class Configuration {
    // ...
  };

  class MyClass {
   private:
    Configuration *config;
   public:
    MyClass(Configuration *config = nullptr) {
      this->config = config;
    }
  };

  int main() {

    Configuration *config1 = new Configuration();  // main function owns it
    MyClass obj1(config1);  // obj1 uses it
    MyClass obj2(config1);  // obj2 uses it

    delete config1;
    return 0;
  }

The dynamic data can also be passed as a returned value.

Example: The object always owns the data. The recipient just used it.

::

  class MyClass {
   private:
    int * array;  // always owned by the object
    int size;
   public:
    // ... other methods
    // array is new'ed in some methods
    ~MyClass() {delete [] array;}
    int *getArray() {return array;}  // expose to outside
    int getSize() {return size;}
  };

  int main() {
    // declare and initialize data in MyClass obj1;
    int size = obj1.getSize();
    int *arr = obj1.getArray();
    for (int i = 0; i < size; i++)
      cout << arr[i] << " ";
    return 0;
  }

Example: The ownership changed to the recipient.

::

  class MyClass {
   private:
    int * array;  // always owned by the object
    int size;
   public:
    // ... other methods
    // array is new'ed in some methods
    int *getPositiveValues();
    int getPositiveCount();
  };

  int * MyClass::getPositiveValues() {
    int posCount = getPositiveCount();
    int *arr = new int[posCount];  // dynamic data, not meant to be owned
    int j = 0;
    for (int i = 0; i < size; i++)
      if (array[i] > 0) {
        arr[j] = array[i];
        j++;
      }
    return arr;
  }

  int MyClass::getPositiveCount() {
    int count = 0;
    for (int i = 0; i < size; i++)
      if (array[i] > 0)
        count++;
    return count;
  }

  int main() {
    // declare and initialize data in MyClass obj1;
    int *positiveArray = obj1.getPositiveValues();
    int size = obj1.getPositiveCount();
    for (int i = 0; i < size; i++)
      cout << positiveArray[i] << " ";
    delete [] positiveArray;  // positiveArray owned by the main function
    return 0;
  }

