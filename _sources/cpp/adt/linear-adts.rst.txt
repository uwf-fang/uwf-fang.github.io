***********
Linear ADTs
***********
Linear ADTs model an ordered (not sorted) homogenous list of data. There are
several common types of linear ADTs that differ in Behaviors.

Common Linear ADTs
==================

List
----
+ Behaviors

  * add/remove/access by index
  * find size
  * check empty

+ Implementation

  * C array (fast access/read by index)
  * linked-list (fast add/remove in the middle)

Stack
-----
+ Behaviors

  * add/remove/access at one end

    - push
    - pop

  * check empty

+ Implementation

  * C array (add/remove at the tail, limited max length)
  * linked-list (unlimited max length)

+ Application

  * Backtracking algorithm
  * Depth-first traversal

Queue
-----
+ Behaviors

  * add at one end, remove/access at another end

    - enqueue
    - dequeue

  * check empty

+ Implementation

  * circular C array (limited max length)
  * linked-list (unlimited max length)

+ Application

  * Breadth-first traversal
  * A\* search

Deque
-----
+ Behaviors

  * add/remove/access at either end
  * check empty

+ Implementation

  * circular C array (limited max length)
  * linked-list (unlimited max length)
  * vector of vectors

Data Structures
===============
There are many data structures suitable in the implementation of the above
ADTs. They should be selected according to the requirements.

+ C Array

  * Fast indexing
  * Slow insertion, or pre-pending
  * Fast appending
  * Slow to change capacity (with re-allocation and data movement)
  * Circular variation (suitable for queue and deque)

+ Linked list

  * Fast insertion, appending, pre-pending
  * Slow indexing
  * Complex logics
  * More space overhead

.. note::

  You can always employer other STL containers in the implementation of your own
  ADTs. For instance, you can use array, vector, deque containers to implement a
  stack ADT.

Related STL containers
======================
Many STL container classes are available as implementations of linear ADTs.
Always chose the one that fit your requirement best.

+ array

  * fixed size
  * static C array

+ vector

  * resizable (slow)
  * dynamic C array

+ list

  * doubly-linked list

+ forward_list

  * singly-linked list

+ deque

  * vector of vectors

+ stack

  * wrapper of other STL containers

+ queue

  * wrapper of other STL containers

