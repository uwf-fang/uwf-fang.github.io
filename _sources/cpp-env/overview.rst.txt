.. highlight:: shell

********
Overview
********

The tools required to generate executables from source code files are known as
**toolchain**. To work on a project, the minimal requirements are:

1. an editor to edit the source code files
2. a toolchain to build executables from the source code files and run

The two steps are independent of each other. They can even exist on different
computers. For instance, you can edit source codes on your laptop, transfer file
to the Linux server and build there to see the result.

Course Requirements
===================

The official (final) environment required in most of the C++ based courses here
are the Linux server from the CS department. It is a Linux pre-installed with
all necessary tools. It is strongly recommended that students give their project
a final test run on the server before submitting it. Assignments collected
through the GitHub Classroom may skip this step as GitHub has provided a Linux
testing environment with a proper setup.

Installing your own local development environment is highly recommended for the
reasons:

#. Convenience: no need to transfer file every time to build and run
#. Learning experience: gain better understanding of the environment though
   the installation and configuration processes

The following list applies to the courses I teach. Other instructor may require
other tools. The first five are required in most of the C++ based courses. The
rest are sometimes optional.

  g++
    The GNU C++ compiler invocation command

  make
    The GNU building tool to produce executables and libraries. Also used in task
    automation

  ssh
    The secure shell to access remote computer system through a command-line
    interface

  Linux
    The operating system required as the final test environment.

  Editor/IDE
    Any tool to be used for source code editing. Your own choice.

  git
    The distributed version control system to manage source code or other files. Employ to work with the GitHub Classroom

  gdb
    The GNU debugger for C/C++ programs

  valgrind
    The memory leak checking tool.

Editor vs IDE
=============

An editor has no knowledge of the toolchain. It makes the installation easier. A
programmer's editor can provide many functionalities but will not be as
feature-rich as a professional IDE.

On the contrast, an IDE can be more powerful than an editor. However, to use the
full power of an IDE, you must let the IDE know where to find your toolchain.
The configuration step can be challenging. It is less flexible for this reason.

Toolchain Installation
======================

The setups are tightly couple to the workflow you follow. They can be
categorized by the location of the toolchain and the operating system you use.

Remote
------

A remote toolchain exists on a remote computer that you can access through
internet. The SSH server from the CS department is one example. Windows remote
desktop is another example. To work with a remote toolchain. You need a software
to manipulate the remote computer. It can be either text based, like the SSH
connection to the Linux server, or GUI based, like remote desktop or TeamViewer.

No installation of toolchain is necessary because they are pre-installed on the server. Students need to learning how to access the server and work remotely.

We will focus on the Linux server from the CS department accessible through SSH
in this document because it is employed as the *final/official* building
environment in our courses.

A separate tutorial discussing the usage of the Linux server using SSH is
available: :doc:`/uwf/cs-ssh-server`

The major drawback using a remote toolchain is that all your files exist on the
remote server. You will need either edit it remotely using a command line based
editors like VIM or constantly transfer file back and forth whenever any changes
are made.

Some editors/IDEs support the edition of remote files in the same way as local
files. It is very convenient. However, the set up and configuration are not
always working and can be challenging to students.

Online
------

There are online toolchains available now that you can access in your web
browser. The zyLib used on zyBooks.com is one example. You can input code in the
text area input box in a webpage or upload your source code and your code will
be compiled and executed on the server. It is a special type of remote server.
This method has minimal requirement from students as they just need a web
browser to use it. The drawbacks are 1. the management of multi-file projects
can be complicated or impossible; 2. may miss functionalities like git and make.

Windows 10 Local
----------------

To have a most compatible toolchain working on Windows, the Windows Subsystem
for Linux (WSL) is preferred over MinGW or CygWin. To set up WSL and related
tools:

1. Install WSL (e.g. Ubuntu 20.04 LTS) from the Microsoft Store
2. Run for the first time: Setup username and password
3. Install building tools: g++, make, git (optional for some classes)

   .. code-block:: bash

     sudo apt-get update
     sudo apt-get install build-essential
     sudo apt-get install git

.. note::

  If you use Visual Studio Code, no need to use "Remote - WSL" plugin.

Mac OS Local
------------

The easiest way to install the toolchain on Mac OS is to install the *XCode
Command line tool* in the Terminal::

  sudo xcode-select --install

.. note::

  You will be asked for your password and then you may see a popup dialog to
  confirm.

Linux Local
-----------

On Ubuntu or Debian family Linux distribution you can install using the
command::

  sudo apt-get install build-essential
  sudo apt-get install git
