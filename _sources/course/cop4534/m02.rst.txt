************************************************************
Module 2 Math Review; Algorithm Analysis; Amortized Analysis
************************************************************
In module 2, we will review some of the math concepts that are important for
the algorithm analysis and data structures that we will cover in the course.
We will also explore more of algorithm analysis topics.

Math Review
===========
In this section, we will review some of the math concepts that are important
for algorithm analysis and data structures.

.. toctree::
   :maxdepth: 2
   :caption: Math review topics:

   math-review

Algorithm Analysis
==================

Motivation
----------
+ to compare and select the best algorithm based on the understanding of:

  * resource usage
  * guarantees
  * practicality
  * tradeoffs
  * limitations

+ to optimize the efficiency of an algorithm

Criteria of Quality
-------------------
To judge the quality of a software, we need to consider the following:

+ correctness
+ **efficiency**
+ simplicity
+ readability
+ testability
+ maintainability
+ usability
+ robustness
+ flexibility
+ portability
+ scalability
+ security
+ reusability
+ extensibility
+ ...

Algorithm Analysis will focus on the **resource efficiency** of an algorithm.

Types of Analysis
-----------------
+ Empirical Analysis

  Empirical analysis involves running actual implementations of algorithms on
  real or simulated data and measuring their performance. This approach
  provides practical insights into how algorithms behave under specific
  conditions.

  .. code-block:: C++
    :caption: Empirical analysis using <chrono> library

    #include <iostream>
    #include <chrono>

    int main() {
        // Start the clock
        auto start = std::chrono::high_resolution_clock::now();
        // Call the function to be measured
        algorithm(parameter);
        // Stop the clock
        auto end = std::chrono::high_resolution_clock::now();
        // Calculate the duration
        std::chrono::duration<double> duration = end - start;
        // Print the duration in seconds
        std::cout << "Function took " << duration.count() << " seconds." << std::endl;
        return 0;
    }

+ Theoretical Analysis

  Theoretical analysis involves mathematically modeling and reasoning about
  algorithm behavior without the need for actual implementation or
  experimentation. This approach provides insights into how an algorithm scales
  as the input size grows.

.. toctree::
   :maxdepth: 2
   :caption: Theoretical Analysis topics:

   /general/complexity

Amortized Analysis
==================
Amortized analysis is a mathematical technique employed in the realm of
computer science and algorithm analysis. It offers a more refined and
comprehensive approach to evaluating the time complexity of algorithms that
involve a sequence of operations, especially those with variable costs.

Especially useful for data structures changes their size and structure
dynamically. Example including dynamic arrays, hash tables, self-balancing
binary search trees, and splay trees.

Types of Amortized Analysis
---------------------------
+ Aggregate Analysis

  Aggregate analysis is the simplest method of amortized analysis. It involves
  determining the total cost of a sequence of operations and then dividing this
  cost by the number of operations to determine the amortized cost.

+ Accounting Method

  This method involves assigning "credits" and "debits" to different operations
  in a way that the total credits always cover the total cost of the
  operations. The goal is to distribute the cost of expensive operations across
  multiple operations, making the average cost more predictable.

+ Potential Method

  The potential method defines a "potential function" that represents the
  stored energy in a data structure after each operation. Changes in potential
  are used to offset the actual cost of operations, ensuring that the amortized
  cost remains relatively constant.

+ ...
