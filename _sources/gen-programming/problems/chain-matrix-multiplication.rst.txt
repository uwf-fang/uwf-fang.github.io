***********************************
Chain Matrix Multiplication Problem
***********************************

Introduction
============
Matrix multiplication is a fundamental operation in numerous scientific and
engineering disciplines. It is not only a cornerstone of linear algebra but
also a crucial operation in graphics, physics simulations, and machine
learning, among other fields.

Optimal parenthesization in matrix multiplication is a well-known problem that
seeks to find the most efficient way to multiply a given sequence of matrices.
The efficiency of matrix multiplication is measured in terms of the number of
scalar multiplications performed, which directly impacts the computational
cost. The challenge arises because the associative property of matrix
multiplication allows for different orders of operations, which can lead to
significantly different computational workloads.

The Chain Matrix Multiplication Problem
=======================================

The Chain Matrix Multiplication (CMM) Problem can be stated as follows: Given a
chain of matrices :math:`A_1, A_2, ..., A_n`, where each matrix :math:`A_i` has
dimensions :math:`p_{i-1} \times p_i`, determine the most efficient way to
multiply these matrices together. The goal is to minimize the total number of
scalar multiplications needed to compute the product :math:`A_1A_2...A_n`.

For example, consider the multiplication of four matrices A, B, C, and D with
dimensions :math:`10 \times 30`, :math:`30 \times 5`, :math:`5 \times 60`, and
:math:`60 \times 10`, respectively. We can fully parenthesize the product in
five distinct ways:

1. :math:`((AB)C)D`
2. :math:`(A(BC))D`
3. :math:`(AB)(CD)`
4. :math:`A((BC)D)`
5. :math:`A(B(CD))`

Each parenthesization leads to a different number of total scalar
multiplications, which can be computed based on the matrix dimensions. The
number of scalar multiplications required for each option is:

1. :math:`((10 \times 30 \times 5) + (10 \times 5 \times 60) + (10 \times 60
   \times 10)) = 1500 + 3000 + 6000 = 10500`
2. :math:`((30 \times 5 \times 60) + (10 \times 30 \times 60) + (10 \times 60
   \times 10)) = 9000 + 18000 + 6000 = 33000`
3. :math:`((10 \times 30 \times 5) + (5 \times 60 \times 10) + (10 \times 30
   \times 10)) = 1500 + 3000 + 3000 = 7500`
4. :math:`((30 \times 5 \times 60) + (10 \times 30 \times 60) + (10 \times 60
   \times 10)) = 9000 + 18000 + 6000 = 33000`
5. :math:`((5 \times 60 \times 10) + (30 \times 5 \times 10) + (10 \times 30
   \times 10)) = 3000 + 1500 + 3000 = 7500`

Options 3 and 5 require the least number of scalar multiplications (7500).
Without a systematic approach to determine the optimal parenthesization, one
might have to compute the cost of all possible parenthesizations to find the
most efficient order, which is not feasible as the number of matrices grows.

The Chain Matrix Multiplication problem seeks to identify the optimal
parenthesization that minimizes the number of scalar multiplications needed to
multiply a given sequence of matrices. As the number of matrices increases, the
brute-force approach to this problem, which entails evaluating every possible
parenthesization, becomes exponentially complex. Thus, more sophisticated
methods such as dynamic programming are needed to find an optimal solution in a
reasonable amount of time.

Brute-Force Approach
====================
The brute-force approach to the Matrix Chain Multiplication problem involves
exhaustively checking all possible ways of parenthesizing the product to
determine the one that results in the least number of scalar multiplications.

1. **Enumeration of All Possibilities**: The brute-force method entails
   generating all possible parenthesizations of the matrix chain. Given
   :math:`n` matrices, there are :math:`C_{n-1}` possible parenthesizations,
   where :math:`C_n` is the :math:`n-th` **Catalan number**. This number grows
   exponentially with :math:`n`, making the brute-force approach
   computationally expensive.

2. **Computing Scalar Multiplications**: For each parenthesization, the
   brute-force algorithm computes the number of scalar multiplications
   required. This requires performing the actual matrix multiplications
   according to each parenthesization scheme, or calculating the multiplication
   costs based on matrix dimensions without carrying out the multiplications.

3. **Identifying the Minimum**: After calculating the multiplication costs for
   all parenthesizations, the brute-force algorithm identifies the one with the
   minimum cost. This is the optimal solution for the matrix chain
   multiplication problem under the brute-force strategy.

The brute-force approach to matrix chain multiplication has an exponential time
complexity due to the number of possible parenthesizations. For :math:`n`
matrices, there are the :math:`(n-1)-th` Catalan number of ways to
parenthesize, which is approximately
:math:`\Theta(\frac{4^n}{n^{3/2}\sqrt{\pi}})`.

Dynamic Programming Approach
============================

Dynamic programming is an algorithmic technique that solves complex problems by
breaking them down into simpler subproblems. It is particularly effective for
optimization problems where the solution can be constructed from solutions to
subproblems. This approach is applicable to the Matrix Chain Multiplication
problem because the problem exhibits both optimal substructure and overlapping
subproblemsâ€”two key properties that make a problem amenable to dynamic
programming.

In the context of matrix chain multiplication, dynamic programming efficiently
finds the optimal multiplication order by systematically examining all possible
ways to fully parenthesize the product and choosing the one with the lowest
cost. This is done by solving smaller instances of the problem (i.e., optimal
multiplication orders for shorter chains of matrices) and using these solutions
to construct the solution for the full problem.

The Matrix Chain Order algorithm utilizes dynamic programming to determine the
optimal multiplication order. It proceeds as follows:

1. **Initialization:** Create a table `m` to store the minimum number of scalar
   multiplications needed for each subchain of matrices. The table `m[i][j]`
   will represent the minimum cost of multiplying matrices from :math:`A_i`
   through :math:`A_j`.

2. **Optimal Substructure Identification:** Determine the optimal split point
   `k` for each subchain, where :math:`i \leq k < j`. This split divides the
   problem into two smaller subproblems: multiplying the chain from :math:`A_i`
   to :math:`A_k` and from :math:`A_{k+1}` to :math:`A_j`.

3. **Iteratively Build the Solution:** Build the solution for each subchain
   based on the solutions to the smaller subproblems. The chain length `L`
   which represents the size of the subproblem, is iterated from 2 to `n`,
   where `n` is the total number of matrices. The optimal cost is computed for
   each subchain of length `L` and the optimal split point `k` is stored in the
   table `s`. The optimal cost for each subchain is computed by considering all
   possible split points `k` and choosing the one with the lowest cost.

Computational Complexity
------------------------
The computational complexity of an algorithm is a measure of the amount of
computing resources it uses as a function of the size of the input:

1. **Time Complexity Analysis**: The time complexity of the Matrix Chain Order
   algorithm is primarily determined by the number of subproblems that need to
   be solved and the time taken to solve each one. The time complexity is
   :math:`O(n^3)`, where :math:`n` is the number of matrices, since for each of
   the :math:`O(n^2)` subproblems, the algorithm performs :math:`O(n)`
   computations to find the optimal split.

2. **Space Complexity Analysis**: The space complexity is concerned with the
   amount of memory space required by the algorithm. For the Matrix Chain Order
   algorithm, this is :math:`O(n^2)`, due to the storage needed for the
   two-dimensional memoization table.

Pseudocode
----------

.. code-block::

  function MatrixChainOrder(p, n) {
    /* For simplicity of the program, one extra row and one
         extra column are allocated in m[][]. 0th row and 0th
         column of m[][] are not used
       s[i][j] is used to save the position of parenthesis
       m[i][j] = Minimum number of scalar multiplications needed
         to compute the matrix A[i]A[i+1]...A[j] = A[i..j] where
         dimension of A[i] is p[i-1] x p[i] */

    //cost is zero when multiplying one matrix
    for (i = 1; i < n; i++)
        m[i][i] = 0;

    // L is chain length
    for (L = 2; L < n; L++) {
      for (i = 1; i < n - L + 1; i++) {
        j = i + L - 1;
        m[i][j] = INT_MAX;
        for (k = i; k <= j - 1; k++) {
          // q = cost/scalar multiplications
          q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
          if (q < m[i][j]) {
            m[i][j] = q;
            s[i][j] = k; // Save k for the optimal parenthesization
          }
        }
      }
    }

    return m; // The first cell of the matrix m[][] contains the minimum cost
  }
