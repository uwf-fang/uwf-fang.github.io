*******************
Modular Development
*******************

Modular development is the process of subdividing a program into separate
sub-units known as modules. A module is a separate software component. It can
often be used in a variety of applications and functions with other components
of the system.

The advantage of modular development include:

1. Ease of code organization/management
2. Reusability
3. Ease of maintenance (testing, collaboration, etc.)

Multi-file Organization in C++
==============================

The key component that allows the modular compilation in C++ is the ``#include``
directive which copies all contents from one file and paste at the location at
the directive.

As a convention, the sharable components are stored in the header files (hpp
files) and the private components are stored in the source files (cpp files).
Other textual files like .inc files are also used (not covered in our courses).

.. glossary::

  header files
    Public declarations (functions and classes), Public configurations

  source files
    Definitions (functions, methods), private declarations, private
    configurations

Best Practices
==============

These are general rules. They should be followed most of the time especially for
beginners. They can be violate when you have a good reason and know what you are
doing.

+ Sort the ``#include`` directive correctly

  1. own header (paired header)
  2. headers in the same project
  3. third-party library headers
  4. system library headers

+ Only include headers as needed, avoid include-all headers like bits/stdc++.h
+ Always add header guards
+ Minimize your header (move out contents to the cpp file as much as possible)
+ Follow a consistent naming convention for all files

Pitfalls
========

Many of these pitfalls are not wrong, but just not recommended at lease for
beginners. C++ is very flexible but following a good convention is more
beginner-friendly.

+ Not using header guards
+ Put all declarations in the header file even though they are private
+ Not following a strict naming convention of files
+ Use .h extension for C++ header files
+ Include cpp files

Examples
========

Please refer to :doc:``make document</tools/make>`` for examples.


.. toctree::
   :maxdepth: 1
   :caption: Related Readings:

   /cpp/gpp
   /tools/make
