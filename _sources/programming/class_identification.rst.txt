********************
Class identification
********************

Introduction
============

If you have done some search on class identification in object-oriented
programming, you will know that there are many methods to achieve this purpose.
It takes tests and experience to find one method that works best for you. The
method described here is only my personal understanding of what works well to
students in teaching.

My Recommended Method
=====================

1. Tell the story in detail

   + Also known as "user story", similar to the concept of "specification" and
     "requirement"
   + Be very detailed from many perspective
   + It is a simpler way compare to "use case" method and is usually good
     enough for small project

2. Extract meaningful keywords (concepts)

   + nouns, verbs, and sometimes adjectives

3. Check keywords against rules to categorize them into the group of objects,
   attributes and behaviors;

   + A good object is an aggregation of attributes and behaviors;
   + Attributes and behaviors in one object should be related (e.g. attributes
     being the subject or object of the behaviors, a.k.a. coherence);
   + An attribute may also be an object as an object can own another object;
   + Make sure the keywords are within the boundary of the software; Sometimes
     you will need to discard keywords that are actually inter-actor from
     outside of your software;

4. Identify the relationships among all keywords (concepts)

5. Generalize objects to classes (C++ is a class-based OOP language)

   + Objects that share same attributes and behaviors can be described as a
     class;
   + A class is a blue print of a group of objects and an object is an instance
     of a class;

6. Review and confirm, repeat step 1-5 if necessary.

   + The identification process is purely problem dependent. One keyword may be
     a class in this system but an attribute in another system; Therefore,
     check carefully;
   + Check if you have missed any part of the user story;

How to learn
============

Just practice. Imagine realistic problems to solve and practice class
identifications on these problems.

Related Topics
==============

+ UML class diagram

Example
=======

1. Story

   Implement a software to manage restaurants. A restaurant has a simple name. A
   restaurant has a menu which lists many items for order. When a client visit
   the restaurant, he will read (be shown) the menu and place an order. The item
   will be delivered to the client later.

2. Keywords

   + nouns: restaurant, menu, client, name, order, food(item)
   + verbs: visit, read(show), place, deliver

3. Categorize

   + out of boundary: client, visit
   + objects: Restaurant, Order, Menu, Item
   + attributes: name(restaurant), name(item)
   + behaviors: show (menu), place (order), deliver (food)

4. Relationships

   + A restaurant owns a name, a menu, many orders
   + A restaurant show menu, place order
   + A menu owns items
   + An order owns items
   + An order delivers items (finalize the order, it should not belong to
     restaurant object)

5. Generalize to class (plural form noun means a vector, an array or a
   collection)

   + Restaurant class

     * instance variables: name, menu, orders
     * methods: showMenu(), placeOrder(vector of items)

   + Menu class

     * instance variables: items
     * methods:

   + Order class

     * instance variables: items
     * methods: deliver(item)

6. review and improve

   + Missing parts

     * menu or item can carry a price
     * menu may allow administration of items (add, drop, change)
     * order should carry quantity of each items
     * order may be canceled
     * you may find even more ...
     * try adding them to the class generalization

