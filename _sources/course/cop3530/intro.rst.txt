*******************************************************
Introduction to Algorithms and Data Structures I Course
*******************************************************

This course is the first of a two-course sequence on algorithms and data
structures. It is designed to provide students with a solid foundation in the
design, analysis, and implementation of algorithms and data structures.

Students are expect to have a good understanding of the C++ programming
language and basic knowledge of data structures and algorithms before starting
this course.

What should be known before taking this course
==============================================
The following are covered in the prerequisite courses at UWF. If any of these
are not familiar, please review them briefly before taking this course or when
needed. You are not expected to memorize all details of these topics, but you
should have a good understanding of them and how to pick up the details when
needed. I will revisit some of them in this course as needed.

+ Development environment setup

  * Local

    - Linux native
    - Mac OS native
    - Windows system for Linux (WSL)

  * Remote

    - SSH server (Linux)

+ C++ Building process

  * g++ compiler

    - 3 stages of compilation
    - cpp files as arguments
    - -c option to enable step-wise compilation
    - other options

  * Makefile

    - three parts of a rule
    - how to trigger a rule using ``make target`` command

  * Modular programming

    - header file

      + include directive
      + header guards

    - cpp file
    - header+cpp pair vs single cpp file

+ C++ language features

  * type

    - primitive

      + regular (int, float, double, char, bool)
      + array
      + pointer
      + reference

    - class

  * variable
  * expressions

    - operators
    - precedence
    - associativity

  * flow of control

    - sequential
    - conditional

      + if-else
      + switch

    - loop

      + while
      + do-while
      + for

  * functions

    - declaration syntax
    - definition syntax
    - call syntax
    - syntax

      + return type
      + return statement
      + formal parameters
      + actual parameters
      + default values

    - parameter passing

      + by value
      + by reference
      + by pointer (special case of by value)

    - function overloading

      + same name but different parameter list

        - return type does not matter
        - parameter naming does not matter
        - parameter type, number, and order matters

      + parameter matching mechanism
      + two level of matching

        * exact match
        * implicit conversion

  * class

    - class declaration syntax

      + sections (public, private)
      + member/instance variables
      + method declaration
      + in-line method definition
      + this pointer

    - method definition syntax

      + scope resolution operator \:\:
      + this pointer

    - special methods

      + constructor

        * default constructor
        * parameterized constructor
        * copy constructor

      + destructor

    - usage

      + as a data type
      + instance/object declaration
      + constructor triggering during declaration
      + ownership

        * dot \.
        * arrow -\>

  * memory management

    - four regions
    - memory leak
    - dynamic data

      + pointer-typed variable
      + new / new []
      + delete / delete []

    - in class context

      + shallow copy
      + big three

  * Input/output (I/O)

    - standard I/O
    - file streams
    - string streams
    - operations

      + insertion operator <<
      + extraction operator >>
      + getline (special handling when used after >>)

    - stream manipulators

      + endl
      + setw
      + setprecision
      + fixed
      + left
      + right

+ basic algorithms

  * searching

    - linear search
    - binary search (sorted array)

  * sorting

    - selection
    - insertion

+ basics of design

  * top-down design
  * object oriented design

+ basics of std::vector

What will be covered in this course
===================================


+ Basic knowledge of of computational complexity

  * Big-O notation
  * Big-Omega notation
  * Big-Theta notation

+ Basic knowledge of data structures and abstract data types

  * Array
  * Linked list
  * Stack ADT
  * Queue ADT
  * Heap
  * Priority queue ADT
  * Tree

    - Binary tree
    - Binary search tree

  * Hash table
  * Map ADT
  * Set ADT
  * Graph

+ Knowledge of algorithms

  * Sorting

    - Insertion sort
    - Selection sort
    - Merge sort
    - Quick sort
    - Heap sort
    - Radix sort

  * Searching

    - Linear search
    - Binary search
    - Search in a search tree
    - Search in a hash table

  * Graph

    - Depth-first search
    - Breadth-first search
    - Single source shortest path: Dijkstra's algorithm

  * Brute force
  * Backtracking

+ Basic knowledge of mathematics

  * Computational complexity

+ Version control system (git) and GitHub classroom
