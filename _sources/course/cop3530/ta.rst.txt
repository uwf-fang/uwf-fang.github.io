**********************************
Instruction For Teaching Assistant
**********************************

Responsibility
==============
#. Assignment grading

   Best to finish grading within one or two weeks after the due date.

   + Labs
   + Projects

#. Student question answering

   + Discord
   + Email

Project Grading
===============
Overview
--------
Programming projects are given on the GitHub Classroom platform. It require
students to an implement application following the instruction. The grading is
mostly functionality based, which means the 80-90% of points based on how the
application compile and run. The GitHub classroom will automatically grade the
assignments according to the results of automatic test runs. The rest of the
grades require some brief code reviews on the neatness and style.

Pre-requisites
--------------
+ A working development environment. Check the :doc:`/cpp/ccpp-env` document for
  more details. Preferably a local environment. Linux, Mac OS or Windows WSL
  should all work well.
+ Knowledge on C++, CLI environment, :doc:`make </tools/make>`, :doc:`git
  </tools/git>` and :doc:`GitHub Classroom </course/github-classroom>`

Workflow
--------
#. Collect the autograding results from the GitHub Classroom

   + You can see most of the grades in the summary list
   + If no grade is shown, click the repository link for details
   + For repositories not getting full grades, click the link to check for
     potential late submission

#. Update grades on Canvas

   + Use the SpeedGrader and Rubric to grade
   + Apply late penalty as needed (-10% < 1 day; -30% < 2 days)
   + Post the grade in the grade book view or notify me to post


.. note::

  More instructions on how to work with GitHub Classroom can be found
  :doc:`here </course/gh-classroom-ta>`.


Policies
--------
+ Late assignment

  Apply the penalty following this scheme: -10% < 1 day; -30% < 2 days

+ Resubmission

  Re-submissions are allowed only when the student has a good reason.

+ Appeal

  The TA can explain the grading details to the student. If it is hard to
  handle, forward it to the instructor.

Hints
-----
+ Only fix problem for students if it can be done in very short time and
  minimal effort.
+ Only read source code files for neatness, and style rather than correctness.
