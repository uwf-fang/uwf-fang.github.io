**************************************
Type, variable, assignment, expression
**************************************

Types
=====

+ For each type, understand:

  * is a class type?
  * is numeric?
  * is ordered?
  * is signed?
  * range
  * related types

Variables
=========

+ identifier naming

.. literalinclude:: variable.cpp
  :language: cpp
  :linenos:
  :lines: 1-25

+ declaration
+ initialization

.. literalinclude:: variable.cpp
  :language: cpp
  :linenos:
  :lines: 27-41

Assignment
==========

+ lvalue - single variable
+ rvalue - expression

.. literalinclude:: variable.cpp
  :language: cpp
  :linenos:
  :lines: 43-61

Expressions
===========

+ operators

  * types

    - arithmetic
    - relational
    - logic
    - bit-wise
    - other: ``<<``, ``>>``, ``&``, ``*``, ``.``, ``->``

  * ``=`` vs ``==``
  * relational ``&& ||`` vs bit-wise ``& |``
  * bool vs int, asymmetric interconversion

    - true -> 1, false -> 0
    - non-zero -> true, 0 -> false

.. literalinclude:: variable.cpp
  :language: cpp
  :linenos:
  :lines: 63-71

+ type cast

  Will not change the value of the variable. Will change the type of the
  expression only.

  * assignment
  * mixed calculation
  * explicit ``type_cast<T>(var)``

.. literalinclude:: variable.cpp
  :language: cpp
  :linenos:
  :lines: 74-96

+ Step-wise evaluation, in every step consider:

  * implicit/explicit type casting
  * precedence rule
  * pitfalls

    - % on double
    - lose precision in / integer divisions

.. literalinclude:: variable.cpp
  :language: cpp
  :linenos:
  :lines: 98-118

+ evaluation tree

Visual aid when evaluating complex expressions

``3.0 / a + 5 < 8 && c > 'b' || d % 2 == 1``

.. graphviz::

  graph eval_tree{
    "||" -- { "&&", "=="};
    "&&" -- {"<", ">"};
    "==" -- {"\%", "1"};
    "<" -- {"+", "8"};
    "+" -- {"/", "5"};
    "/" -- {"3.0", "a"};
    ">" -- {"c", "\'b\'"};
    "\%" -- {"d", "2"};
  }